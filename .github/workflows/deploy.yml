name: Deploy to Server

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy prebuilt images via SSH
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Build Docker images
        run: |
          docker compose -f compose.yaml build \
          --build-arg REACT_APP_API_KEY=${{ secrets.REACT_APP_API_KEY }} \
          --build-arg REACT_APP_BACKEND_URL=${{ secrets.REACT_APP_BACKEND_URL }} \
          --build-arg REACT_APP_WEBSOCKET_URL=${{ secrets.REACT_APP_WEBSOCKET_URL }}
          docker images
          docker save -o cinema_images.tar tai-django-web tai-frontend
          file cinema_images.tar

      - name: Fix permissions for Docker image archive
        run: chmod 644 cinema_images.tar

      - name: List files and permissions
        run: ls -l

      - name: Copy Docker images to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "cinema_images.tar"
          target: "/home/${{ secrets.SSH_USER }}/"

      - name: cinema_images.tar saved on server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "cinema_images.tar saved on server"
            ls -lh /home/${{ secrets.SSH_USER }}
            file /home/${{ secrets.SSH_USER }}/cinema_images.tar

      - name: Copy compose.yaml files
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "compose.yaml"
          target: "/home/${{ secrets.SSH_USER }}/CinemaLand/"

      - name: Copy compose.prod.up.yaml files
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "compose.prod.up.yaml"
          target: "/home/${{ secrets.SSH_USER }}/CinemaLand/"

      - name: Upload .env to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "${{ secrets.ENV_FILE }}" > /home/${{ secrets.SSH_USER }}/CinemaLand/.env

      - name: Load images and run containers on server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          timeout: 9000s
          script: |
            set -ex
            cd /home/${{ secrets.SSH_USER }}

            echo "Loading Docker images..."
            docker load -i cinema_images.tar

            cd CinemaLand

            echo "Stopping containers..."
            docker compose down 
            docker image prune -f

            echo "Starting containers..."
            docker compose -f compose.prod.up.yaml up -d


  migrate:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Usu≈Ñ cinema_images.tar i wykonaj migracje
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "Waiting for container..."
            for i in {1..30}; do
              if docker ps --filter "name=cinema_backend" --filter "status=running" | grep -q cinema_backend; then
                echo "cinema_backend is on!"
                break
              fi
              echo "Waiting for cinema_backend... ($i)"
              sleep 3
            done


            rm -rf /home/${{ secrets.SSH_USER }}/cinema_images.tar
            echo "Running Django migrations..."
            docker exec cinema_backend python manage.py migrate