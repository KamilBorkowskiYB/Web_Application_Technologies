name: Deploy to Server

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy via SSH
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Copy project to server via SSH
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "."
          target: "/home/${{ secrets.SSH_USER }}/CinemaLand"

      - name: Upload .env to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "${{ secrets.ENV_FILE }}" > /home/${{ secrets.SSH_USER }}/CinemaLand/.env

      - name: Run deployment commands on server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /home/${{ secrets.SSH_USER }}/CinemaLand

            echo "Stopping and removing containers..."
            docker compose down --volumes --remove-orphans

            echo "Pruning Docker system..."
            docker system prune -af --volumes

            echo "Building containers..."
            docker compose build || { echo "Build failed"; exit 1; }

            echo "Starting containers..."
            docker compose up -d

            echo "Listing containers..."
            docker compose ps

            echo "Showing container logs..."
            docker compose logs --tail=50

            echo "Waiting for Django container to become healthy..."
            for i in {1..36}; do
              status=$(docker inspect --format='{{.State.Health.Status}}' cinema_backend 2>/dev/null || echo "not found")
              echo "Status: $status"
              if [ "$status" = "healthy" ]; then
                echo "cinema_backend is healthy!"
                break
              fi
              sleep 5
            done

            if [ "$status" != "healthy" ]; then
              echo "cinema_backend did not become healthy in time."
              docker compose logs cinema_backend
              exit 1
            fi

            echo "Running Django migrations..."
            docker compose exec cinema_backend python manage.py migrate